
    PRESERVE8      ; данная инструкция указывает компоновщику что необходимо 8-ми байтовое выравнивание стека
    THUMB          ; указывает на использование сокращенного набора команд (THUMB) 

;***************************************************************************
;*
;*  external declarations
;*
;***************************************************************************

    IMPORT      __main

    IMPORT      |Image$$vector_table_base$$Base|
    IMPORT      |Image$$loader_stack$$ZI$$Limit|
    IMPORT      |Image$$lvl01_stack$$ZI$$Base|
    IMPORT      irq_table

;***************************************************************************
;*
;*  function declarations
;*
;***************************************************************************

; extern LOADER_FUNC void init_hardware( void );
    IMPORT      init_hardware
; extern LOADER_FUNC void init_software( void );
    IMPORT      init_software
; extern LOADER_DATA error_t init_error;
    IMPORT      init_error

; extern void init_startup( void )
    EXPORT      init_startup                ; Делаем видимым для всего проекта указанную метку. При чем это опережающий экспорт перед самим непосредственно объявлением
    EXPORT      _sys_command_string         ; Опережающий экспорт допускается т.к. ассемблер проходит код два раза как раз для этого

;***************************************************************************
;*
;*    Startup routine for embedded application
;*
;***************************************************************************
    AREA        |.loader_text|, CODE, READONLY  ; выделяем в отдельную секцию указанный ниже код. При этом компоновщик разместит данный код в соответствии со скаттер файлом
    ALIGN                                       ; инструкция выравнивает, если необходимо, предыдущие инструкции для того, что бы соблюдалось выравнивание для данной секции
init_startup    PROC                            ; метка, которой будет передан адрес, в котором будет располагаться код начала подпрограммы

    ; В соответствии с документацией ПО начинает работу в режиме Thread

    ; Запрет прерываний
    cpsid       i           ; инструкция запрета прерываний причем сама инструкция имеет вид (cps), id - это доп. суффикс для обозначения отключения прерываний 
                            ; параметр i служит для выствления флага о запрете прерываний
    isb                     ; (isb barrier) данная инструкция предполагает завершение работы внутреннего конвейера для предыдущих инструкций, 
                            ; что бы следующие инструкции могли воспользоваться результатами их работы 

    ; Задание адреса таблицы прерываний
    ldr         r0,=|Image$$vector_table_base$$Base|    ; перенос в регистр значения адреса начала таблицы векторов прерывани из ОЗУ
    ldr         r1,=irq_table                           ; перенос в регистр адреса таблицы векторов прерываний заданных в программе
    str         r1,[r0]                                 ; сохраняем адрес таблицы irq_table в области vector_table_base

    ; Стек должен быть выравнен на 8 байт
    ; MSP (для использования в режиме Handler)
    ; PSP (для использования режиме thread)

    ; Инициализация регистров в соответствии с EABI
    ; При перезапуске регистр CONTROL сбрасывается в ноль
    ; Это означает: 
    ; 1) thread mode имеет привелегированный (privileged) доступ 
    ; 2) Use SP_main as the current stack
    movs        r0,#0
    msr         CONTROL,r0                              ; обнуляем регистр CONTROL       
    isb                                                 ; isb barrier
    ldr         r0,=|Image$$loader_stack$$ZI$$Limit|    ; считываем адрес ячейки памяти, следующей за областью стека загрузчика
    mov         sp,r0                                   ; помещаем этот адрес в указатель стека (т.е указатель стека это всегда 
                                                        ; указатель на последнюю помещенную ячейку в стек)

    ; Инициализация аппаратуры
    ldr         r0,=init_hardware
    blx         r0                      ; безусловный переход по указанной ветке

    ; Инициализация модулей базового ПО
    ldr         r0,=init_software
    blx         r0

    ; Задание точки выхода из main
    ldr         r0,=init_exit
    mov         lr,r0                   ; закидываем в линк регистр адрес программы куда будет возвращаться основная программа main

    ; Выход в main
    ldr         r0,=init_error          ; закидываем адрес переменной
    ldr         r0,[r0]                 ; далее закидываем само значение переменной
    movs        r1,#0                   ; обнуляем регистры
    movs        r2,#0
    ldr         r4,=|__main|
    bx          r4                      ; заходим в __main
    ENDP

init_exit PROC
    bkpt        #0                      ; генерация debug event
    b           init_exit               ; branch to label
    ENDP

; При использовании подпрограммы main с параметрами runtime библиотеки
; вызывают подпрограмму _sys_command_string для получения командной
; строки. Подробности смотри в описании библиотеки.
; char * _sys_command_string( char *cmd, int len )
_sys_command_string PROC
    movs        r0,#0
    bx          lr
    ENDP
        
    ALIGN

    END
