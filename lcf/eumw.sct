/* Примечания:
    1. Идеология построения файла следующая:
ОБЛАСТЬ ДЛЯ ХРАНЕНИЯ {                                     ; Load Region
    ОБЛАСТЬ ДЛЯ ВЫПОЛНЕНИЯ {                               ; Execution Region
        ДАННЫЕ ИЗ ФАЙЛА( имя секции/переменной/аттрибуты ) ; Section
    }
}
    2. Секция InRoot$$Sections (runtime библиотеки компилятора) должна быть в
Root Execution Region.
    3. Компоновщик генерирует скрытые числовые значения вида
Image$$region_name$$Base, Image$$region_name$$Length, которые можно использовать
в программе.
    Подробности в описании компановщика.
    4. Компановщик не умеет генерировать числовые значения, однако умеет
пользоваться макросами. Для этого он вызывает компилятор языка С, который
заменяет макросы на числовые значения.
    5. Читайте ВНИМАТЕЛЬНО описание компановщика. Если в описании Section
одновременно указывать имя секции и аттрибуты, то результат может не
соответствовать вашим ожиданиям. */
;   6. Компановщик понимает коментарии только двух видов: ; и /* */
/* Коментарии вида // не воспринимаются
    7. Похоже, что некоторые возможности, например использование #define,
реализованы начиная с 5-й версии Keil.
    8. В таблице Region$$Table содержится описание как инициализаировать
секции данных. Однако формат таблицы не задокументирован. Таблица обрабатывается
с использованием Run-Time библиотеки компилятора, исходный код которой не
предоставляется.
    9. Аттрибут FIRST в описании секции неявно защищает её от deadstrep
*/

/*
 Memory map
-------------+------------+------------+-------------+------------------------
 Name        | Start      | End        | Width       | Description
-------------+------------+------------+-------------+------------------------
 ITCM Lower Aliase
             | 0x00000000 | 0x07FFFFFF |             | reserved 
 rom         | 0x08000000 | 0x080FFFFF |  8 (1024 Kb)| ITCM Lower Aliase   (Data & Code) // ПЗУ
             | 0x08100000 | 0x0FFFFFFF |             | reserved
 ram         | 0x10000000 | 0x1000FFFF |  8 ( 64 Kb) | SRAM                (Data)        // ОЗУ
 
 sram        | 0x20000000 | 0x2001FFFF |  8 ( 128 Kb)| SRAM                (Data & Code) // Статическая ОЗУ 
             | 0x20020000 | 0x3FFFFFFF |             | reserved
-------------+------------+------------+-------------+------------------------
*/

/*
    Микропроцессор не имеет PMSA Extension.
    Sector 0 0x0800 0000 - 0x0800 3FFF 16 Kbytes
    ...
    Sector 3 0x0800 C000 - 0x0800 FFFF 16 Kbytes
    Sector 4 0x0801 0000 - 0x0801 FFFF 64 Kbytes
    Sector 5 0x0802 0000 - 0x0803 FFFF 128 Kbytes
    ...
    Sector 11 0x080E 0000 - 0x080F FFFF 128 Kbytes

MEMORY {
    rom              : origin=0x08000000, lenght=0x00100000
    rom_vect         : origin=0x08000000, lenght=0x00001000 // Менеджер прерываний           4 Кб
    rom_loader       : origin=0x08001000, lenght=0x0000B000 // Первоначальный загрузчик     44 Кб
    rom_lvl0         : origin=0x0800C000, lenght=0x000F4000 // Base software. Core      960+16 Кб 
    rom_lvl1         : origin=0x????????, lenght=0x???????? // Base software. Services
    rom_lvl2         : origin=0x????????, lenght=0x???????? // Base software. API
    rom_bsp          : origin=0x????????, lenght=0x???????? // Base software process
    rom_process1     : origin=0x????????, lenght=0x???????? // Application process

    ram              : origin=0x10000000, lenght=0x00010000
    ram_vect         : в ram_lvl0                           // Менеджер прерываний
    ram_loader       : origin=0x1000D000, lenght=0x00001000 // Первоначальный загрузчик OVERLAY
    ram_lvl0         : origin=0x10000000, lenght=0x00008000 // Base software. Core
    ram_lvl1         : origin=0x????????, lenght=0x???????? // Base software. Services
    ram_lvl2         : нет секции                           // Base software. API
    ram_bsp          : origin=0x????????, lenght=0x???????? // Base software process
    ram_process1     : origin=0x????????, lenght=0x???????? // Application process
    ram_thread_stack : origin=0x1000D000, lenght=0x00001000 // Стек thread           OVERLAY
    ram_lvl01_stack  : origin=0x1000D000, lenght=0x00001000 // Стек handler          OVERLAY

    sram             : origin=0x20000000, lenght=0x00020000

}
*/
/* Документация для ознакомления с построением скаттер файла: compiler_reference_guide_101754_0616_01_en */

/* Interrupt vector table */                                  

rom_vect 0x08000000 0x00001000 {                        /* Память для хранения информации о таблице прерываний */
    interrupt_vectors +0 {                              /* Область исполнения кода находится в том же месте что и область хранения */
        *(.irq_vector_table)                            /* Потому что это корневой раздел. При этом синтаксист указывает на то что бы поиск происходил для всех файлов проекта*/
    }
    /* Адрес используемой таблицы прерываний */
    vector_table_base 0x10000000 EMPTY UNINIT 0x4 { 
    }
}

/* ----- Loader ----- */

rom_loader 0x08001000 0x0000B000 {

/* Select section for runtime library - start */
    /* Code and constants */
    loader_text +0 0x0000B000 {
        *(.loader_text)                 /* Область кода */
        *(.loader_rodata)               /* Область констант */
/* Loader */
        *(InRoot$$Sections)             /* All library sections that must be in a root region, for example, __main.o, __scatter*.o, __dc*.o, *Region$$Table */
        /**c_p.l(+TEXT)                    Подтягивается код стандартной библиотеки ARM c_p.l */
        /**(i.__ARM_common_switch8)       Описывает шаблон секции для подключения в исполняемую область */
/* Software */
        /* Nothing */
    }

    /* Data */
    loader_data 0x1000C000 OVERLAY 0x00001000 {
        *(.loader_data)
        *(.loader_bss)
/* Loader */
       /* *c_p.l(+DATA)
        *c_p.l(+BSS)*/
/* Software */
        /* Nothing */
    }
/* Select section for runtime library - end */

    /* Out Data */
    loader_out 0x10010000 EMPTY -256 {
    }

/* ----- Loader stack (handler) ----- */

    loader_stack 0x1000E000 OVERLAY EMPTY 0x00001000 {
    }
}

rom_lvl0 0x0800C000 0x000F4000 {

/* ----- Base software stack (handler) ----- */

    lvl01_stack 0x1000E000 OVERLAY EMPTY 0x00001000 {
    }

/* ----- Software level 0 ----- */

    /* Code and constants */
    lvl0_text 0x0800C000 0x000F4000 {
        *(.lvl0_text)
        *(.lvl0_rodata)
    }

    /* Data */
    lvl0_data ImageLimit(vector_table_base) (0x10006000<=ImageLimit(vector_table_base)?0:0x10006000-ImageLimit(vector_table_base)) {
        *(.lvl0_data)
        *(.lvl0_bss)
    }
}

/* ----- Software level 1 ----- */

rom_lvl1 +0 (0x08100000<=ImageLimit(rom_lvl0)?0:0x08100000-ImageLimit(rom_lvl0)) {

    /* Code and constants */
    lvl1_text +0 (0x08100000<=ImageLimit(rom_lvl0)?0:0x08100000-ImageLimit(rom_lvl0)) {
        *(.lvl1_text)
        *(.lvl1_rodata)
    }

    /* Data */
    lvl1_data ImageLimit(lvl0_data) (0x1000D000<=ImageLimit(lvl0_data)?0:0x1000D000-ImageLimit(lvl0_data)) {
        *(.lvl1_data)
        *(.lvl1_bss)
    }

    /* Data - DMA buffers */
/*    lvl1_dmabuf 0x10000000 UNINIT ImageBase( loader_out ) - 0x10000000 {*/
      lvl1_dmabuf 0x20000000 UNINIT 0x10000 {
        *(.lvl1_dmabuf)
    }
}

/* ----- Software level 2 ----- */

rom_lvl2 +0 (0x08100000<=ImageLimit(rom_lvl1)?0:0x08100000-ImageLimit(rom_lvl1)) {

    /* Code and constants */
    lvl2_text +0 (0x08100000<=ImageLimit(rom_lvl1)?0:0x08100000-ImageLimit(rom_lvl1)) {
        *(.lvl2_text)
        *(.lvl2_rodata)

/* Select section for runtime library - start */
/* Loader */
        /* Nothing */
/* Software */
/*
        *(InRoot$$Sections)
        *c_p.l(+TEXT)
		*(i.__ARM_common_switch8)
 */
/* Select section for runtime library - end */

}

    /* Data (N/A) */
/*
    lvl2_data ImageLimit(lvl1_data) (0x10006000<=ImageLimit(lvl1_data)?0:0x10006000-ImageLimit(lvl1_data)) {
        *(.lvl2_data)
        *(.lvl2_bss)
    }
 */
}

/* ----- Software level 3. Base software process ----- */

rom_bsp +0 (0x08100000<=ImageLimit(rom_lvl2)?0:0x08100000-ImageLimit(rom_lvl2)) {

    /* Code and constants */
    process_bsp_text +0 (0x08100000<=ImageLimit(rom_lvl2)?0:0x08100000-ImageLimit(rom_lvl2)) {
        *(.process_bsp_text)
    }

    /* Data */
    process_bsp_data ImageLimit(lvl1_data) (0x1000D000<=ImageLimit(lvl1_data)?0:0x1000D000-ImageLimit(lvl1_data)) {
        *(.process_bsp_data)
        *(.process_bsp_bss)
    }
}

/* ----- Software level 3. Application process 1 ----- */

rom_process1 +0 (0x08100000<=ImageLimit(rom_bsp)?0:0x08100000-ImageLimit(rom_bsp)) {

    /* Code and constants */
    process1_text +0 (0x08100000<=ImageLimit(rom_bsp)?0:0x08100000-ImageLimit(rom_bsp)) {
        *(+TEXT)
    }

    /* Data */
    process1_data ImageLimit(process_bsp_data) (0x1000D000<=ImageLimit(process_bsp_data)?0:0x1000D000-ImageLimit(process_bsp_data)) {
        *(+DATA)
        *(+BSS)

/* Select section for runtime library - start */
/* Loader */
        /* Nothing */
/* Software */
/*
        *c_p.l(+DATA)
        *c_p.l(+BSS)
 */
/* Select section for runtime library - end */

    }

/* ----- Software level 3. Stacks & heap ----- */

    thread_heap AlignExpr(ImageLimit(process1_data),8) OVERLAY UNINIT (0x1000E000<=ImageLimit(process1_data)?0:0x1000E000-ImageLimit(process1_data)) {
        *(HEAP)
    }
    thread_stack AlignExpr(ImageLimit(thread_heap),8) OVERLAY UNINIT (0x1000E000<=ImageLimit(thread_heap)?0:0x1000E000-ImageLimit(thread_heap)) {
        *(STACK)
    }
}
